@page "/register"

@inject IAuthService authService
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider

<EditForm Model="registerModel" OnValidSubmit="Register_ValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group">
        <label>Username</label>
        <InputText @bind-Value="registerModel.Username" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label>Email Address</label>
        <InputText type="email" @bind-Value="registerModel.Email" class="form-control"></InputText>
        <small>
            <ValidationMessage For="(() => registerModel.Email)"></ValidationMessage>
        </small>
    </div>
    <div class="form-group">
        <label>Bio</label>
        <InputTextArea @bind-Value="registerModel.Bio" class="form-control"></InputTextArea>
    </div>
    <div class="form-group">
        <label>Password</label>
        <InputText type="password" @bind-Value="registerModel.Password" class="form-control"></InputText>
        <small>
            <ValidationMessage For="(() => registerModel.Password)"></ValidationMessage>
        </small>
    </div>
    <div class="form-group">
        <label>Confirm Password</label>
        <InputText type="password" @bind-Value="registerModel.ConfirmPassword" class="form-control"></InputText>
        <small>
            <ValidationMessage For="(() => registerModel.ConfirmPassword)"></ValidationMessage>
        </small>
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-secondary">Register</button>
    </div>
</EditForm>

@code {
    RegisterModel registerModel = new();

    private async void Register_ValidSubmit()
    {
        var result = await authService.Register(registerModel);
        if (result.Success)
        {
            navManager.NavigateTo("/");
        }
        else
        {
            Console.WriteLine("Error in registration");
        }
    }
}
